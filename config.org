#+TITLE: EMACS CONFIGURATION

* Emacs Config

** Startup options

*** Scroll bar, Tool bar, Menu bar

#+BEGIN_SRC emacs-lisp

(tool-bar-mode -1)
(scroll-bar-mode -1)
;; (menu-bar-mode -1)

#+END_SRC


*** Cursor Type

#+BEGIN_SRC emacs-lisp
(set-default 'cursor-type 'hbar)
#+END_SRC




*** Org SRC
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** Lockfiles

#+BEGIN_SRC emacs-lisp
(setq create-lcokfiles nil)
#+END_SRC



*** Backup

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
(setq backup-by-copying t)
#+END_SRC

** Utilities

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
   'org-babel-load-languages
      '((calc . t)))
#+END_SRC

*** Ido Mode

#+BEGIN_SRC emacs-lisp

(ido-mode)

#+END_SRC

*** Column Number Mode

#+BEGIN_SRC emacs-lisp
(column-number-mode)
#+END_SRC

*** Show-Paren Mode

#+BEGIN_SRC emacs-lisp
(show-paren-mode)
(setq show-paren-delay 0)
(require 'paren)
(set-face-background 'show-paren-match "VioletRed4")
#+END_SRC

*** Hl Line Mode

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 0)
(set-face-foreground 'highlight nil)
(set-face-background hl-line-face "VioletRed3")
(set-face-attribute hl-line-face nil :underline nil)
#+END_SRC


*** Winner Mode
#+BEGIN_SRC emacs-lisp
(winner-mode t)
#+END_SRC



*** Zone Mode

#+BEGIN_SRC emacs-lisp
(defun zone-choose (pgm)
    "Choose a PGM to run for `zone'."
    (interactive
     (list
      (completing-read
       "Program: "
       (mapcar 'symbol-name zone-programs))))
    (let ((zone-programs (list (intern pgm))))
      (zone)))
#+END_SRC
    
** Keybindings

*** Wind Move

Lets you move point from window to window using Shift and arrow keys. 

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC


*** TODO Which Key 

** Package-initialize

*** Ace Window

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p") 'ace-window)
#+END_SRC

*** Ace Jump Mode

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/full/path/where/ace-jump-mode.el/in/")
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+END_SRC

*** Evil Mode

#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)
#+END_SRC

*** Org Mode

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
       '((sequence "TODO" "NEXT" "WAITING" "INACTIVE" "|" "DONE" "CANCELLED")))
#+END_SRC
    
*** Neotree


#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/some/path/neotree")
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'ascii 'arrow))
(setq-default neo-show-hidden-files t)
#+END_SRC


*** Initialize

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

** Theme

*** Transparency

#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha 80)
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp

(load-theme 'doom-molokai t)

(setq frame-title-format "emacs")

#+END_SRC


